"use client";
import { useAuth } from "@clerk/nextjs";
import { ClerkProvider, SignedIn, UserButton, useUser } from "@clerk/nextjs";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

import React, { useState, useEffect } from "react";
import axios from "axios";
import { createClient } from "@/utils/supabase/client";

import {
  GoogleGenerativeAI,
  HarmCategory,
  HarmBlockThreshold,
} from "@google/generative-ai";

const MODEL_NAME = "gemini-1.0-pro";
const API_KEY = process.env.NEXT_PUBLIC_GEMINI_API_KEY as string;

const Info = () => {
  const [image, setImage] = useState(null);
  const [description, setDescription] = useState("");
  const [jsonData, setJsonData] = useState(null);
  const [name, setName] = useState("");
  const [quantity, setQuantity] = useState("");
  const [shelf, setShelf] = useState("");
  const [price, setPrice] = useState("");
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [data, setData] = useState<string>("");

  const handleImageChange = (e: any) => {
    setImage(e.target.files[0]);
  };

  async function runChat(prompt: string) {
    const genAI = new GoogleGenerativeAI(API_KEY);
    const model = genAI.getGenerativeModel({ model: MODEL_NAME });

    const generationConfig = {
      temperature: 0.9,
      topK: 1,
      topP: 1,
      maxOutputTokens: 2048,
    };

    const safetySettings = [
      {
        category: HarmCategory.HARM_CATEGORY_HARASSMENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_HATE_SPEECH,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
      {
        category: HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT,
        threshold: HarmBlockThreshold.BLOCK_MEDIUM_AND_ABOVE,
      },
    ];

    const chat = model.startChat({
      generationConfig,
      safetySettings,
      history: [
        {
          role: "user",
          parts: [{ text: "HELLO" }],
        },
        {
          role: "model",
          parts: [{ text: "Hello there! How can I assist you today?" }],
        },
      ],
    });

    const result = await chat.sendMessage(prompt);
    const response = result.response;
    setData(response.text());
  }

  const handleSubmit = async () => {
    if (!image) {
      alert("Please select an image file");
      return;
    }

    try {
      const formData = new FormData();
      formData.append("file", image);

      const response = await axios.post(
        "http://localhost:5001/read_barcode",
        formData,
        {
          headers: {
            "Content-Type": "multipart/form-data",
          },
        }
      );

      const jsonData = response.data;
      setJsonData(jsonData);
      setDescription(JSON.stringify(jsonData));

      setIsLoading(true);

      //   await runChat(
      //     `give me the food information with its name, shelf_life, and price of the barcode ${jsonData["barcode_data"]} in JSON format.`
      //   );

      await runChat(
        `give me the food information of the barcode 8901491103046`
      );

      console.log(data);

      setIsLoading(false);
    } catch (error) {
      setIsLoading(false);
      console.error("Error:", error);
    }
  };

  //   const createUser = async () => {
  //     try {
  //       setIsLoading(true);
  //       const supabase = createClient();

  //       // Ask Gemini AI for the shelf life
  //       await runChat(
  //         `What's the typical storage time for ${name}, in days, months, or years?  Provide a single number if possible.`
  //       );

  //       // Now 'data' state should contain the shelf life generated by Gemini AI
  //       const shelfLife = data;

  //       // Insert item into the database
  //       const { error } = await supabase
  //         .from("item")
  //         .insert([{ name, quantity, price, shelf_life: shelfLife }]);
  //       if (error) {
  //         throw error;
  //       }
  //       setIsLoading(false);
  //       setName("");
  //       setQuantity("");
  //       setShelf("");
  //       setPrice("");
  //       console.log("Item added successfully");
  //     } catch (error) {
  //       console.error("Error adding item:", error);
  //       setIsLoading(false);
  //     }
  //   };

  return (
    <div className="container mx-auto p-4 pt-6 md:p-6 lg:p-12">
      <h1 className="text-3xl font-bold mb-4">Upload Image</h1>
      <div className="flex flex-col md:flex-row items-center mb-4">
        <input
          type="file"
          onChange={handleImageChange}
          className="w-full md:w-1/2 xl:w-1/3 px-4 py-2 text-lg"
        />
        <button
          type="submit"
          onClick={handleSubmit}
          className="bg-orange-500 hover:bg-orange-700 text-white font-bold py-2 px-4 rounded"
        >
          Submit
        </button>
      </div>
      {description && (
        <div className="bg-gray-100 p-4 rounded">
          <h2 className="text-lg font-bold mb-2">Description:</h2>
          <pre className="text-sm">{description}</pre>
        </div>
      )}
      {jsonData && (
        <div className="bg-gray-100 p-4 rounded">
          <h2 className="text-lg font-bold mb-2">JSON Data:</h2>
          <pre className="text-sm">{JSON.stringify(jsonData, null, 2)}</pre>
        </div>
      )}
      <div>{data}</div>
    </div>
  );
};

export default Info;
